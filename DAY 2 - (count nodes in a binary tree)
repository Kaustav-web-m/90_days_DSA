 // DAY 2
 
Given the root of a complete binary tree, return the number of the nodes in the tree.

According to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, 
and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.

Design an algorithm that runs in less than O(n) time complexity.

Example 1:

Input: root = [1,2,3,4,5,6]
Output: 6
Example 2:

Input: root = []
Output: 0
Example 3:

Input: root = [1]
Output: 1
 
Constraints:

The number of nodes in the tree is in the range [0, 5 * 104].
0 <= Node.val <= 5 * 104
The tree is guaranteed to be complete.
 
#include<bits/stdc++.h>
using namespace std;
struct Node
{
   int data;
   struct Node* left;
   struct Node* right;

   Node(int val)
   {
    data = val;
    left = NULL;
    right = NULL;
   }
};
int count_Nodes(Node* root)
{
    if(root == NULL)
    {
        return 0;
    }
    return count_Nodes(root->left) + count_Nodes(root->right) + 1;
}
int main()
{
    Node* root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);
    root->left->left = new Node(4);
    root->left->right = new Node(5);
    root->right->left = new Node(6);
    root->right->right = new Node(7);

    cout<<count_Nodes(root);

    return 0;
}

