// DAY 3
// MERGE SORT 

#include<bits/stdc++.h>
using namespace std;

void Merge(int arr[] , int l, int mid , int r)
{
    int n1 = mid - l +  1 ;
    int n2 = r - mid ;  

    int a[n1];
    int b[n2]; //  temporary arrays

    for(int i = 0 ; i < n1 ; i++) // filling uo the arrays
    {
        a[i] = arr[l+i];
    }

    for(int i = 0; i < n2; i++) 
    {
        b[i] = arr[mid+1+i];
    }

    int i = 0 ;
    int j = 0 ;
    int k = l; // initializing the pointers

    while(i < n1 && j < n2)
    {
        if(a[i] < b[j])
        {
            arr[k] = a[i];
            k++;
            i++;
        }
        else
        {
            arr[k] = b[j];
            k++;
            j++;
        }
    }

    while(i < n1)
    {
        arr[k] = a[i];
        k++;
        i++;
    }

    while(j < n2)
    {
        arr[k] = b[j];
        k++;
        j++;    
    }

}
void merge_sort(int arr[],int l,int r)
{
    if(l<r)
    {
        int mid = (l+r)/2;

        merge_sort(arr,l,mid);
        merge_sort(arr,mid+1,r);

        Merge(arr,l,mid,r);
    }
}
int main()
{
    int arr[] = {5,4,3,2,1};
    merge_sort(arr,0,4); // r should be size - 1
    cout<<"\nSORTED ARRAY USING MERGE SORT : ";
    for(int i = 0 ; i < 5  ; i++)
    {
        cout<<arr[i]<<" ";
    }
    cout<<"\n\n";

    return 0 ;
}

// Time complexity : O(nlogn)  -  all cases
